const bel = require('bel')
const csjs = require('csjs-inject')

module.exports = tiler

function tiler (strings, ...args) {
  var mosaic = parse(strings, args)
  var el = template(mosaic)
  el.length = mosaic.length
  mosaic.reduce((el, val, key) => (el[key] = val, el), el)
  return el
}
function template (mosaic) {
  var opts = mosaic[0]
  var args = mosaic.slice(1)
  var cmd = opts.cmd
  if (cmd === 'tab') return tab(opts, args)
  if (cmd === 'col' || cmd === 'row') return tile(cmd, args)
  return command(opts, args)
  // console.log(opts)
  // for (var i = 1, len = mosaic.length; i < len; i++) {
  //   var item = mosaic[i]
  //
  //   console.log(mosaic[i])
  // }
  // console.log('----------')
  // return bel`
  //   <div class=${css.tilemosaic}>
  //     ${'menu()'}
  //     ${'elements.map(tab)'}
  //   </div>`
}
function tile (cmd, args) {
  return bel`
    <div class="${css.tile} ${cmd === 'col' ? css.col : css.row}">
      ${args.map(item => template(item))}
    </div>`
}
function tab ({ active = 1 }, args) {
  var element = args[active - 1].el
  var names = args.map(item => item.name)
  var container = bel`<div class=${css.container}>${element}</div>`
  return bel`
    <div class=${css.tab}>
      ${menu(names, active - 1, args, container)}
      ${container}
    </div>`
}
function menu (names, active, args, container) {
  var elements = names.map((name, i) => bel`
    <a class=${css.tabname} onclick=${e => onclick(i)}>${name}</a>
  `)
  elements[active].classList.add(css.tabactive)
  return bel`
    <div class=${css.menu}>
      ${elements}
    </div>`
  function onclick (i) {
    elements[active].classList.remove(css.tabactive)
    active = i
    elements[active].classList.add(css.tabactive)
    // debugger
    container.innerHTML = ''
    container.appendChild(args[i].el)
  }
}
function command (opts, args) {
  console.log(opts, args)
  console.error('@TODO: implement custom commands')
}
function parse (strings, args) {
  var editor = args[0]
  var output = args[1]
  var scapp = args[2]
  var navbar = args[3]
  return [
    { cmd: 'col' },
      [{cmd: 'row'},
      [{cmd: 'tab', active: 1 }, editor, output],
      [{cmd: 'tab'}, scapp]
    ],
    [{cmd: 'tab'}, navbar]
  ]
}
const css = csjs`
  .tile {
    display: flex;
    position: relative;
    box-sizing: border-box;
    overflow: auto;
  }
  .tab {
    display: flex;
    flex-direction: column;
    padding: 5px;
    background-color: green;
  }
  .menu {
    padding: 5px 5px 0px;
    height: 23px;
  }
  .tabname {
    margin: 0px 3px;
    padding: 3px 3px 0px 3px;
    border: 1px dotted white;
    background-color: grey;
    font-weight: 600;
    cursor: pointer;
  }
  .tabactive {
    border-bottom: 1px solid grey;
    color: white;
  }
  .container {
    height: calc(100% - 23px);
    background-color: grey;
  }
  .col {
    flex-direction: column;
    padding: 5px;
    background-color: red;
  }
  .row {
    flex-direction: row;
    padding: 5px;
    background-color: blue;
  }
`
